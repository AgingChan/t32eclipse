sub sub_w3 (addr, d)
	v = p_wr_reg (0xb8, addr, 1)	// analog register address
	v = p_wr_reg (0xb9, d, 1)	// analog register address
	v = p_wr_reg (0xba, 0x60, 1)	// analog register address
endsub

////////////////////////////////////////////
//      m/integer_N/fraction from freq
////////////////////////////////////////////
freq = p_get_size (0, 4)
//print freq

m_mod = freq % 16
m = (freq-m_mod) / 16
integer_N_mod = freq % 32
integer_N = (freq-integer_N_mod) / 32
frac_in = integer_N_mod * (1 << 18)

//analog
sub_w3(0xa8, 0x83) //rx voc prescaler current: 8uA
sub_w3(0x06, 0x06) //pd
sub_w3(0x9d, 0x16) //pfd_s1, pfss0
sub_w3(0x9f, 0x0c) //cp_ise1_intg
sub_w3(0xaa, 0x81) //pd_intg_pll
sub_w3(0xac, m) //m(pll_dpll)
sub_w3(0x01, 0x14) //digital ldo to 1.9v
sub_w3(0x02, 0x87) //change analog ldo to 1.6v
sub_w3(0xa5, 0x2f) //change mux to 7
sub_w3(0xa0, 0x02) //dpll_en 0
sub_w3(0xa0, 0x03) //dpll_en 1

//gpio20 input enable
v = p_wr_reg (0x5b2, 0x00, 1)
v = p_wr_reg (0x58a, 0x00, 1)
//frac_in
v = p_wr_reg (0x4e4, frac_in, 3)
//integer_in
v = p_wr_reg (0x4dc, integer_N, 2)
//rdiv
v = p_wr_reg (0x4de, 0x01, 1)

//initial
v = p_wr_reg (0x4e8, 0x30, 1)
v = p_wr_reg (0x4e9, 0x08, 1)
v = p_wr_reg (0x4ea, 0x7a, 1)
v = p_wr_reg (0x4eb, 0x1c, 1)
//1 rxcyc0 1
v = p_wr_reg (0x4e9, 0x09, 1)
//2 tp_cyc 1
v = p_wr_reg (0x4e9, 0x89, 1)
//3 sof 1
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
v = p_wr_reg (0x4e9, 0x8b, 1)
//4 sof 0
v = p_wr_reg (0x4e9, 0x89, 1)
//5 tp_cyc 0
v = p_wr_reg (0x4e9, 0x09, 1)
//6 sd_resetb 1/intg_en 0
v = p_wr_reg (0x4ea, 0x79, 1)
//7 rxcyc1 1
v = p_wr_reg (0x4e9, 0x0d, 1)
